name: Ci Cd Staging Environment

on:
    pull_request:
        branches: [ main ]

jobs:
    test:
        runs-on: ubuntu-latest
        environment:
          name: staging
        # because we cannot use env directly when using docker run
        env:
          GOOGLE_CLOUD_STORAGE_SERVICE_ACCOUNT: ${{secrets.GOOGLE_CLOUD_STORAGE_SERVICE_ACCOUNT}}
          GOOGLE_CLOUD_STORAGE_BUCKET: ${{secrets.GOOGLE_CLOUD_STORAGE_BUCKET}}
          SERVER_URI: ${{secrets.SERVER_URI}}
          GOOGLE_CLOUD_STORAGE_EMULATOR_ENDPOINT: ${{secrets.GOOGLE_CLOUD_STORAGE_EMULATOR_ENDPOINT}}
          GOOGLE_OAUTH2_REFRESH_TOKEN_TEST: ${{secrets.GOOGLE_OAUTH2_REFRESH_TOKEN_TEST}}
          GOOGLE_OAUTH2_CLIENT_ID_TEST: ${{secrets.GOOGLE_OAUTH2_CLIENT_ID_TEST}}
          GOOGLE_OAUTH2_CLIENT_SECRET_TEST: ${{secrets.GOOGLE_OAUTH2_CLIENT_SECRET_TEST}}
          PORT: ${{secrets.PORT}}

        steps:
            - name: Clone Repository
              uses: actions/checkout@v4

            - uses: hadolint/hadolint-action@v3
              with:
                dockerfile: build/Dockerfile

            - uses: hadolint/hadolint-action@v3
              with:
                dockerfile: build/Dockerfile.test

            - name: Run Docker Compose
              run: docker compose -f deployments/compose.yaml up -d

            - name: Unit testing
              run: |
                docker build -t ${{github.event.repository.name}} -f build/Dockerfile.test .

                docker run --rm --name ${{github.event.repository.owner.login}} --add-host=host.docker.internal:host-gateway -e GOOGLE_CLOUD_STORAGE_SERVICE_ACCOUNT -e GOOGLE_CLOUD_STORAGE_BUCKET -e SERVER_URI -e GOOGLE_CLOUD_STORAGE_EMULATOR_ENDPOINT -e GOOGLE_OAUTH2_REFRESH_TOKEN_TEST -e PORT -e GOOGLE_OAUTH2_CLIENT_ID_TEST -e GOOGLE_OAUTH2_CLIENT_SECRET_TEST ${{github.event.repository.name}} go test -v --cover -ldflags '-w -s' ./...

            - name: Clean up
              if: always()
              run: |
                  docker rmi ${{github.event.repository.name}}
                  docker compose -f deployments/compose.yaml down -v --rmi all

    deploy:
        needs: [ test ]
        runs-on: ubuntu-latest
        environment:
            name: staging
            url: ${{vars.STAGING_URL}}
        permissions:
          packages: write
        env:
            REGISTRY: ghcr.io
            IMAGE_NAME: ghcr.io/${{github.repository_owner}}/${{github.event.repository.name}}
        steps:
            - name: Clone Repository
              uses: actions/checkout@v4

            - name: Setup QEMU
              uses: docker/setup-qemu-action@v3

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Login to container registry
              uses: docker/login-action@v3
              with:
                registry: ${{env.REGISTRY}}
                username: ${{github.repository_owner}}
                password: ${{secrets.GITHUB_TOKEN}}

            - name: Build Image &  Push to Registry
              uses: docker/build-push-action@v5
              with:
                context: .
                file: build/Dockerfile
                push: true
                tags: |
                  ${{env.IMAGE_NAME}}:${{github.sha}}
                  ${{env.IMAGE_NAME}}

            - name: Azure Login
              uses: azure/login@v1
              with:
                creds: ${{ secrets.AZURE_CREDENTIALS }}

            - name: Deploy to Azure Container Apps
              uses: azure/container-apps-deploy-action@v2
              with:
                registryUrl: ${{env.REGISTRY}}
                containerAppName: ${{github.event.repository.name}}-staging
                resourceGroup: ${{secrets.AZURE_RESOURCE_GROUP}}
                imageToDeploy: ${{env.IMAGE_NAME}}:${{github.sha}}
                targetPort: ${{secrets.PORT}}

            - name: Job Successful Feedback
              if: ${{ success() }}

              run: |
                  cat >> $GITHUB_STEP_SUMMARY <<MD
                  # Successful CI & CD staging environment
                  
                  **This test include:**
                  - [x] Tidy
                  - [x] Formatting
                  - [x] Unit Test
  
                  **App Published to:** ${{vars.STAGING_URL}}
                  MD
